% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Grym.R
\name{prRecruitPars0}
\alias{prRecruitPars0}
\alias{prRecruitsIB}
\alias{prRecruitsQuantileIB}
\alias{prRecruitParsIB}
\alias{prRecruitsG}
\alias{prRecruitsQuantileG}
\alias{prRecruitParsG}
\alias{prRecruitsLN}
\alias{prRecruitsQuantileLN}
\alias{prRecruitParsLN}
\alias{prRecruitsDIB}
\alias{prRecruitsQuantileDIB}
\alias{prRecruitParsDIB}
\alias{prRecruitsDG}
\alias{prRecruitsQuantileDG}
\alias{prRecruitParsDG}
\alias{prRecruitsDLN}
\alias{prRecruitsQuantileDLN}
\alias{prRecruitParsDLN}
\title{Proportional recruitment}
\usage{
prRecruitPars0(
  Msf,
  mnR,
  vrR,
  r = 1,
  plus = 0,
  Mbrak = seq(0, 2.5, 0.1),
  tol = 1e-10
)

prRecruitsIB(n, ps, mnA = 1)

prRecruitsQuantileIB(q, ps, mnA = 1)

prRecruitParsIB(
  Msf,
  mnR,
  vrR,
  r = 1,
  p = 0,
  plus = 0,
  Mbrak = seq(0, 2.5, 0.1),
  tol = 1e-10
)

prRecruitsG(n, ps, mnA = 1)

prRecruitsQuantileG(q, ps, mnA = 1)

prRecruitParsG(
  Msf,
  mnR,
  vrR,
  r = 1,
  p = 0,
  plus = 0,
  Mbrak = seq(0, 2.5, 0.1),
  tol = 1e-10
)

prRecruitsLN(n, ps, mnA = 1)

prRecruitsQuantileLN(q, ps, mnA = 1)

prRecruitParsLN(
  Msf,
  mnR,
  vrR,
  r = 1,
  p = 0,
  plus = 0,
  Mbrak = seq(0, 2.5, 0.1),
  tol = 1e-10
)

prRecruitsDIB(n, ps, mnA = 1)

prRecruitsQuantileDIB(q, ps, mnA = 1)

prRecruitParsDIB(
  Msf,
  mnR,
  vrR,
  r = 1,
  p = 0,
  plus = 0,
  Mbrak = seq(0, 2.5, 0.1),
  tol = 1e-10
)

prRecruitsDG(n, ps, mnA = 1)

prRecruitsQuantileDG(q, ps, mnA = 1)

prRecruitParsDG(
  Msf,
  mnR,
  vrR,
  r = 1,
  p = 0,
  plus = 0,
  Mbrak = seq(0, 2.5, 0.1),
  tol = 1e-10
)

prRecruitsDLN(n, ps, mnA = 1)

prRecruitsQuantileDLN(q, ps, mnA = 1)

prRecruitParsDLN(
  Msf,
  mnR,
  vrR,
  r = 1,
  p = 0,
  plus = 0,
  Mbrak = seq(0, 2.5, 0.1),
  tol = 1e-10
)
}
\arguments{
\item{Msf}{matrix of final unscaled integrated natural mortalities}

\item{mnR}{the mean of the proportion R}

\item{vrR}{the variance of the proportion R}

\item{r}{the reference age class}

\item{plus}{the number of additional age classes in the plus class
(\code{plus=0} implies no plus class).}

\item{Mbrak}{the values of natural mortality to assess when
bracketing a root for the nonlinear solver}

\item{tol}{the tolerance on mean R.}

\item{n}{number of recruitment events}

\item{ps}{a list of model parameters}

\item{mnA}{mean number of recruits}

\item{q}{vector of quantiles}

\item{p}{the probability of a zero recruitment (ignored by
non-delta variants).}
}
\value{
the family of \code{prRecruitPar} functions each return a list
with elements
\itemize{
\item \code{IB}, \code{G}, \code{LN}, \code{DIB}, \code{DG}, \code{DLN} parameters of the inverse beta,
gamma or log normal or a delta variant.
\item \code{mnQ}, \code{vrQ} mean and variance of the stochastic fraction
\item \code{M} the estimated scaling of natural mortality
\item \code{s0}, \code{s1}, \code{s2} summed survivorships
}

The family of \code{prRecruitsQuantile} functions returns a vector of
quantiles from the distribution of recruit numbers.

The family of \code{prRecruits} functions each return a vector of
random numbers of recruits.
}
\description{
Generate random recruit numbers according to the proportional
recruitment model in which the distribution of the fraction of
recruits is inverse Beta (IB), Gamma (G), log Normal (LN) or a
zero inflated variant of these (DIB,DG,DLN).
}
\details{
The proportional recruit model defines R, the number of
individuals in age class r as a proportion of the population of
the same age or older. Given estimates of the mean and variance of
R from independent surveys, the model determines the scaling of
natural mortality \code{M} and random recruitment numbers that will
reproduce the observed mean and variance of R.  The model
generates random recruitment numbers as a stochastic fraction of
the expected size of the population above recruitment age; these
functions generate random numbers of recruits when that fraction
is inverse Beta (IB), Gamma (G) or log Normal (LN), or a delta
variant (DIB, DG or DLN) where zero recruitment occurs with
probability \code{p}.

\code{prRecruitPars} computes the scaling of natural mortality and mean
and variance of the stochastic fraction required to reproduce the
mean and variance observed in R.

The functions \code{prRecruitParsIB}, \code{prRecruitsQuantileIB} and
\code{prRecruitsIB} compute the model parameters, quantiles of the
distribution of recruits, and random numbers of recruits when the
stochastic fraction is inverse Beta.

The functions \code{prRecruitParsG}, \code{prRecruitsQuantileG} and
\code{prRecruitsG} compute the model parameters, quantiles of the
distribution of recruits, and random numbers of recruits when the
stochastic fraction is Gamma.

The functions \code{prRecruitParsLN}, \code{prRecruitsQuantileLN} and
\code{prRecruitsLN} compute the model parameters, quantiles of the
distribution of recruits, and random numbers of recruits when the
stochastic fraction is log Normal.

The functions \code{prRecruitParsDIB}, \code{prRecruitsQuantileDIB} and
\code{prRecruitsDIB} compute the model parameters, quantiles of the
distribution of recruits, and random numbers of recruits when the
stochastic fraction is delta inverse Beta.

The functions \code{prRecruitParsDG}, \code{prRecruitsQuantileDG} and
\code{prRecruitsDG} compute the model parameters, quantiles of the
distribution of recruits, and random numbers of recruits when the
stochastic fraction is delta Gamma.

The functions \code{prRecruitParsDLN}, \code{prRecruitsQuantileDLN} and
\code{prRecruitsDLN} compute the model parameters, quantiles of the
distribution of recruits, and random numbers of recruits when the
stochastic fraction is delta log Normal.
}
\note{
These routines must fail if \code{mnR} is smaller than the
reciporical of the number of age classes of the same age or
older than the reference age class.
}
\examples{
## Daily time steps and 7 age classes
nsteps <- 365
Ages <- 2:8
Days <- seq(from=0, to=1, length=nsteps+1)
h <- 1/nsteps

## Ages
ages <- outer(X=Days, Y=Ages, FUN="+")
## Age-length and length-weight conversions
ls <- vonBertalanffyAL(A=ages, t0=0.0667, K=0.5, Linf=500)
ws <- powerLW(L=ls, a=9E-10, b=3.32)

## Constant intra-annual natural mortality
ms <- matrix(data=1, nrow=nsteps+1, ncol=length(x=Ages))
ms <- ms/mean(x=trapz(fs=ms, h=h))
Ms <- ctrapz(fs=ms, h=h)
Msf <- final(P=Ms)

## Compute model parameters that give mean R = 0.3 and var R = 0.1, 
## where R is the proportion of recruits in the population
ps <- prRecruitParsIB(Msf=Msf, mnR=0.3, vrR=0.01)
## Estimated natural mortality scaling
ps$M

## Median number of recruits
prRecruitsQuantileIB(q=0.5, ps=ps, mnA=100)

## Ten random recruit numbers
prRecruitsIB(10, ps, mnA=100)

## Mean number of recruits
mean(x=prRecruitsIB(n=10000, ps=ps, mnA=100))

## Simulate age profiles and calculate R
N <- matrix(data=0, nrow=10000, ncol=ncol(x=Ms))
for(k in 1:nrow(x=N))
  N[k, ] <- ageStructureS(R=prRecruitsIB(n=ncol(x=Ms), ps=ps, mnA=100), Msf=Msf, M=ps$M)
R <- N[, 1]/rowSums(x=N)
## Estimate mean and variance of R
mean(R)
var(R)

## Histogram of simulated recruitments
rs <- prRecruitsIB(n=100000, ps=ps, mnA=100)
hist(x=rs[rs < 350], breaks=seq(from=0, to=350, by=5), freq=FALSE, xlab="Recruits", main="Inverse Beta")

## Compute model parameters that give mean R = 0.3 and var R = 0.01, 
## where R is the proportion of individual in age class 3 as a fraction
## of individuals that are that age or older
ps <- prRecruitParsIB(Msf=Msf, mnR=0.3, vrR=0.01, r=3)
## Estimated natural mortality scaling
ps$M

## Median number of recruits
prRecruitsQuantileIB(q=0.5, ps=ps, mnA=100)

## Ten random recruit numbers
prRecruitsIB(n=10, ps=ps, mnA=100)

## Mean number of recruits
mean(x=prRecruitsIB(n=10000, ps=ps, mnA=100))

## Simulate age profiles and calculate R
N <- matrix(data=0, nrow=10000, ncol=ncol(x=Ms))
for(k in 1:nrow(x=N))
  N[k, ] <- ageStructureS(R=prRecruitsIB(n=ncol(x=Ms), ps=ps, mnA=100), Msf=Msf, M=ps$M)
R <- N[, 3]/rowSums(x=N[, 3:7])
## Estimate mean and variance of R
mean(x=R)
var(x=R)

## Compute model parameters that give mean R = 0.3 and var R = 0.01, 
## where R is the proportion of recruits in the population
ps <- prRecruitParsG(Msf=Msf, mnR=0.3, vrR=0.01)
## Estimated natural mortality scaling
ps$M

## Median number of recruits
prRecruitsQuantileG(q=0.5, ps=ps, mnA=100)

## Ten random recruit numbers
prRecruitsG(n=10, ps=ps, mnA=100)

## Mean number of recruits
mean(x=prRecruitsG(n=10000, ps=ps, mnA=100))

## Simulate age profiles and calculate R
N <- matrix(data=0, nrow=10000, ncol=ncol(x=Ms))
for(k in 1:nrow(x=N))
  N[k, ] <- ageStructureS(R=prRecruitsG(n=ncol(x=Ms), ps=ps, mnA=100), Msf=Msf, M=ps$M)
R <- N[, 1]/rowSums(x=N)
## Estimate mean and variance of R
mean(x=R)
var(x=R)

## Histogram of simulated recruitments
rs <- prRecruitsG(100000, ps, mnA=100)
hist(x=rs[rs < 350], breaks=seq(from=0, to=350, by=5), freq=FALSE, xlab="Recruits", main="Gamma")

## Compute model parameters that give mean R = 0.3 and var R = 0.01, 
## where R is the proportion of individual in age class 3 as a fraction
## of individuals that are that age or older
ps <- prRecruitParsG(Msf=Msf, mnR=0.3, vrR=0.01, r=3)
## Estimated natural mortality scaling
ps$M

## Median number of recruits
prRecruitsQuantileG(q=0.5, ps=ps, mnA=100)

## Ten random recruit numbers
prRecruitsG(n=10, ps=ps, mnA=100)

## Mean number of recruits
mean(x=prRecruitsG(n=10000, ps=ps, mnA=100))

## Simulate age profiles and calculate R
N <- matrix(data=0, nrow=10000, ncol=ncol(x=Ms))
for(k in 1:nrow(x=N))
  N[k, ] <- ageStructureS(R=prRecruitsG(n=ncol(x=Ms), ps=ps, mnA=100), Msf=Msf, M=ps$M)
R <- N[, 3]/rowSums(x=N[, 3:7])
## Estimate mean and variance of R
mean(x=R)
var(x=R)

## Compute model parameters that give mean R = 0.3 and var R = 0.01, 
## where R is the proportion of recruits in the population
ps <- prRecruitParsLN(Msf=Msf, mnR=0.3, vrR=0.01)
## Estimated natural mortality scaling
ps$M

## Median number of recruits
prRecruitsQuantileLN(q=0.5, ps=ps, mnA=100)

## Ten random recruit numbers
prRecruitsLN(n=10, ps=ps, mnA=100)

## Mean number of recruits
mean(x=prRecruitsLN(n=10000, ps=ps, mnA=100))

## Simulate age profiles and calculate R
N <- matrix(data=0, nrow=10000, ncol=ncol(x=Ms))
for(k in 1:nrow(x=N))
  N[k, ] <- ageStructureS(R=prRecruitsLN(n=ncol(x=Ms), ps=ps, mnA=100), Msf=Msf, M=ps$M)
R <- N[, 1]/rowSums(x=N)
## Estimate mean and variance of R
mean(x=R)
var(x=R)

## Histogram of simulated recruitments
rs <- prRecruitsLN(n=100000, ps=ps, mnA=100)
hist(x=rs[rs < 350], breaks=seq(from=0, to=350, by=5), freq=FALSE, xlab="Recruits", main="Log Normal")

## Compute model parameters that give mean R = 0.3 and var R = 0.01, 
## where R is the proportion of individual in age class 3 as a fraction
## of individuals that are that age or older
ps <- prRecruitParsLN(Msf=Msf, mnR=0.3, vrR=0.01, r=3)
## Estimated natural mortality scaling
ps$M

## Median number of recruits
prRecruitsQuantileLN(q=0.5, ps=ps, mnA=100)

## Ten random recruit numbers
prRecruitsLN(n=10, ps=ps, mnA=100)

## Mean number of recruits
mean(x=prRecruitsLN(n=10000, ps=ps, mnA=100))

## Simulate age profiles and calculate R
N <- matrix(data=0, nrow=10000, ncol=ncol(x=Ms))
for(k in 1:nrow(x=N))
  N[k, ] <- ageStructureS(R=prRecruitsLN(n=ncol(x=Ms), ps=ps, mnA=100), Msf=Msf, M=ps$M)
R <- N[, 3]/rowSums(x=N[, 3:7])
## Estimate mean and variance of R
mean(x=R)
var(x=R)

## Compute model parameters that give mean R = 0.3 and var R = 0.2, 
## where R is the proportion of recruits in the population,  assuming
## zero recruitment occurs with probability 0.4
ps <- prRecruitParsDIB(Msf=Msf, mnR=0.3, vrR=0.2, p=0.4)
## Estimated natural mortality scaling
ps$M

## Median number of recruits
prRecruitsQuantileDIB(q=0.5, ps=ps, mnA=100)

## Ten random recruit numbers
prRecruitsDIB(n=10, ps=ps, mnA=100)

## Mean number of recruits
mean(x=prRecruitsDIB(n=10000, ps=ps, mnA=100))

## Simulate age profiles and calculate R
N <- matrix(data=0, nrow=10000, ncol=ncol(x=Ms))
for(k in 1:nrow(x=N))
  N[k, ] <- ageStructureS(R=prRecruitsDIB(n=ncol(x=Ms), ps=ps, mnA=100), Msf=Msf, M=ps$M)
R <- N[, 1]/rowSums(x=N)
## Estimate mean and variance of R
mean(x=R, na.rm=TRUE)
var(x=R, na.rm=TRUE)

## Histogram of simulated recruitments
rs <- prRecruitsDIB(n=100000, ps=ps, mnA=100)
hist(x=rs[rs >0 & rs < 600], breaks=seq(from=0, to=600, by=5), freq=FALSE, xlab="Recruits", main="Delta Inverse Beta")

## Fraction of zero recruitments
mean(x=rs==0)

## Compute model parameters that give mean R = 0.3 and var R = 0.2, 
## where R is the proportion of individual in age class 3 as a fraction
## of individuals that are that age or older,  assuming
## recruitment occurs with probability 0.4
ps <- prRecruitParsDIB(Msf=Msf, mnR=0.3, vrR=0.2, p=0.4, r=3)
## Estimated natural mortality scaling
ps$M

## Median number of recruits
prRecruitsQuantileDIB(q=0.5, ps=ps, mnA=100)

## Ten random recruit numbers
prRecruitsDIB(n=10, ps=ps, mnA=100)

## Mean number of recruits
mean(x=prRecruitsDIB(n=10000, ps=ps, mnA=100))

## Simulate age profiles and calculate R
N <- matrix(data=0, nrow=10000, ncol=ncol(x=Ms))
for(k in 1:nrow(x=N))
  N[k, ] <- ageStructureS(R=prRecruitsDIB(n=ncol(x=Ms), ps=ps, mnA=100), Msf=Msf, M=ps$M)
R <- N[, 3]/rowSums(x=N[, 3:7])
## Estimate mean and variance of R
mean(x=R, na.rm=TRUE)
var(x=R, na.rm=TRUE)

## Compute model parameters that give mean R = 0.3 and var R = 0.2, 
## where R is the proportion of recruits in the population,  assuming
## zero recruitment occurs with probability 0.4
ps <- prRecruitParsDG(Msf=Msf, mnR=0.3, vrR=0.2, p=0.4)
## Estimated natural mortality scaling
ps$M

## Median number of recruits
prRecruitsQuantileDG(q=0.5, ps=ps, mnA=100)

## Ten random recruit numbers
prRecruitsDG(n=10, ps=ps, mnA=100)

## Mean number of recruits
mean(x=prRecruitsDG(n=10000, ps=ps, mnA=100))

## Simulate age profiles and calculate R
N <- matrix(data=0, nrow=10000, ncol=ncol(x=Ms))
for(k in 1:nrow(x=N))
  N[k, ] <- ageStructureS(R=prRecruitsDG(n=ncol(x=Ms), ps=ps, mnA=100), Msf=Msf, M=ps$M)
R <- N[, 1]/rowSums(x=N)
## Estimate mean and variance of R
mean(x=R, na.rm=TRUE)
var(x=R, na.rm=TRUE)

## Histogram of simulated recruitments
rs <- prRecruitsDG(n=100000, ps=ps, mnA=100)
hist(x=rs[rs >0 & rs < 600], breaks=seq(from=0, to=600, by=5), freq=FALSE, xlab="Recruits", main="Delta Gamma")

## Fraction of zero recruitments
mean(x=rs==0)

## Compute model parameters that give mean R = 0.3 and var R = 0.2, 
## where R is the proportion of individual in age class 3 as a
## fraction of individuals that are that age or older, assuming
## recruitment occurs with probability 0.4
ps <- prRecruitParsDG(Msf=Msf, mnR=0.3, vrR=0.2, p=0.4, r=3)
## Estimated natural mortality scaling
ps$M

## Median number of recruits
prRecruitsQuantileDG(q=0.5, ps=ps, mnA=100)

## Ten random recruit numbers
prRecruitsDG(n=10, ps=ps, mnA=100)

## Mean number of recruits
mean(x=prRecruitsDG(n=10000, ps=ps, mnA=100))

## Simulate age profiles and calculate R
N <- matrix(data=0, nrow=10000, ncol=ncol(x=Ms))
for(k in 1:nrow(x=N))
  N[k, ] <- ageStructureS(R=prRecruitsDG(n=ncol(x=Ms), ps=ps, mnA=100), Msf=Msf, M=ps$M)
R <- N[, 3]/rowSums(x=N[, 3:7])
## Estimate mean and variance of R
mean(x=R, na.rm=TRUE)
var(x=R, na.rm=TRUE)

## Compute model parameters that give mean R = 0.3 and var R = 0.2, 
## where R is the proportion of recruits in the population,  assuming
## zero recruitment events occur with probability 0.4.
ps <- prRecruitParsDLN(Msf=Msf, mnR=0.3, vrR=0.1, p=0.4)
## Estimated natural mortality scaling
ps$M

## Median number of recruits
prRecruitsQuantileDLN(q=0.5, ps=ps, mnA=100)

## Ten random recruit numbers
prRecruitsDLN(n=10, ps=ps, mnA=100)

## Mean number of recruits
mean(x=prRecruitsDLN(n=10000, ps=ps, mnA=100))

## Simulate age profiles and calculate R
N <- matrix(data=0, nrow=10000, ncol=ncol(x=Ms))
for(k in 1:nrow(x=N))
  N[k, ] <- ageStructureS(R=prRecruitsDLN(n=ncol(x=Ms), ps=ps, mnA=100), Msf=Msf, M=ps$M)
R <- N[, 1]/rowSums(x=N)
## Estimate mean and variance of R
mean(x=R, na.rm=TRUE)
var(x=R, na.rm=TRUE)

## Histogram of simulated recruitments
rs <- prRecruitsDLN(n=100000, ps=ps, mnA=100)
hist(x=rs[rs >0 & rs < 600], breaks=seq(from=0, to=600, by=5), freq=FALSE, xlab="Recruits", main="Delta Log Normal")

## Fraction of zero recruitments
mean(x=rs==0)

## Compute model parameters that give mean R = 0.3 and var R = 0.2, 
## where R is the proportion of individual in age class 3 as a
## fraction of individuals that are that age or older,  assuming
## recruitment occurs with probability 0.4
ps <- prRecruitParsDLN(Msf=Msf, mnR=0.3, vrR=0.2, p=0.4, r=3)
## Estimated natural mortality scaling
ps$M

## Median number of recruits
prRecruitsQuantileDLN(q=0.5, ps=ps, mnA=100)

## Ten random recruit numbers
prRecruitsDLN(n=10, ps=ps, mnA=100)

## Mean number of recruits
mean(x=prRecruitsDLN(n=10000, ps=ps, mnA=100))

## Simulate age profiles and calculate R
N <- matrix(data=0, nrow=10000, ncol=ncol(x=Ms))
for(k in 1:nrow(x=N))
  N[k, ] <- ageStructureS(R=prRecruitsDLN(n=ncol(x=Ms), ps=ps, mnA=100), Msf=Msf, M=ps$M)
R <- N[, 3]/rowSums(x=N[, 3:7])
## Estimate mean and variance of R
mean(x=R, na.rm=TRUE)
var(x=R, na.rm=TRUE)
}
